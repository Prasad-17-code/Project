 import csv
import os
from datetime import datetime, timedelta

class Event:
    def __init__(self, id, name, date, time, type, location="", recurrence=None):
        self.id = id
        self.name = name
        self.date = date  # DD-MM-YYYY
        self.time = time  # HH:MM
        self.type = type
        self.location = location
        self.recurrence = recurrence  # None, "weekly", "monthly"

    def show(self):
        print(f"[{self.id}] {self.name} | {self.date} {self.time} | {self.type} | {self.location} | Recurs: {self.recurrence if self.recurrence else 'No'}")

class EventManager:
    def __init__(self):
        self.events = []
        self.next_id = 1

    def validate_date_time(self, date_str, time_str):
        try:
            datetime.strptime(date_str, "%d-%m-%Y")
            datetime.strptime(time_str, "%H:%M")
            return True
        except ValueError:
            return False

    def add_event(self, name, date, time, type, location="", recurrence=None):
        if not self.validate_date_time(date, time):
            print("Invalid date or time format.")
            return

        for ev in self.events:
            if ev.date == date and ev.time == time:
                print("Conflict detected with event:", ev.name)
                return

        event = Event(self.next_id, name, date, time, type, location, recurrence)
        self.events.append(event)
        self.next_id += 1
        print("Event added successfully.")

    def edit_event(self, event_id, **kwargs):
        for ev in self.events:
            if ev.id == event_id:
                for key, value in kwargs.items():
                    if hasattr(ev, key) and value:
                        setattr(ev, key, value)
                print("Event updated.")
                return
        print("Event not found.")

    def delete_event(self, identifier):
        for ev in self.events:
            if str(ev.id) == str(identifier) or ev.name.lower() == str(identifier).lower():
                self.events.remove(ev)
                print("Event deleted.")
                return
        print("Event not found.")

    def view_events_by_date(self, date):
        filtered = [ev for ev in self.events if ev.date == date]
        filtered.sort(key=lambda e: e.time)
        for ev in filtered:
            ev.show()

    def today_events(self):
        today = datetime.now().strftime("%d-%m-%Y")
        self.view_events_by_date(today)

    def search_events(self, keyword):
        for ev in self.events:
            if keyword.lower() in ev.name.lower() or keyword.lower() in ev.type.lower():
                ev.show()

    def send_reminders(self):
        for ev in self.events:
            event_time = datetime.strptime(ev.date + " " + ev.time, "%d-%m-%Y %H:%M")
            delta = event_time - datetime.now()
            if 0 < delta.total_seconds() <= 3600:
                print(f"Reminder: {ev.name} at {ev.time} on {ev.date}")

    def handle_recurring_events(self):
        new_events = []
        for ev in self.events:
            if ev.recurrence == "weekly":
                dt = datetime.strptime(ev.date, "%d-%m-%Y") + timedelta(weeks=1)
                new_events.append(Event(self.next_id, ev.name, dt.strftime("%d-%m-%Y"), ev.time, ev.type, ev.location, ev.recurrence))
                self.next_id += 1
            elif ev.recurrence == "monthly":
                dt = datetime.strptime(ev.date, "%d-%m-%Y") + timedelta(days=30)
                new_events.append(Event(self.next_id, ev.name, dt.strftime("%d-%m-%Y"), ev.time, ev.type, ev.location, ev.recurrence))
                self.next_id += 1
        self.events.extend(new_events)

class PersistentStorage:
    FILE = "events.csv"

    @staticmethod
    def save(events):
        with open(PersistentStorage.FILE, "w", newline="") as f:
            writer = csv.writer(f)
            for ev in events:
                writer.writerow([ev.id, ev.name, ev.date, ev.time, ev.type, ev.location, ev.recurrence])

    @staticmethod
    def load():
        events = []
        if os.path.exists(PersistentStorage.FILE):
            with open(PersistentStorage.FILE, "r") as f:
                reader = csv.reader(f)
                for row in reader:
                    if row:
                        events.append(Event(int(row[0]), row[1], row[2], row[3], row[4], row[5], row[6] if row[6] else None))
        return events

def main():
    manager = EventManager()
    manager.events = PersistentStorage.load()
    if manager.events:
        manager.next_id = max(ev.id for ev in manager.events) + 1

    while True:
        print("\n1. Add Event  2. Edit Event  3. Delete Event  4. View Events by Date")
        print("5. Todayâ€™s Events  6. Search  7. Send Reminders  8. Handle Recurring  9. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            name = input("Name: ")
            date = input("Date (DD-MM-YYYY): ")
            time = input("Time (HH:MM): ")
            type = input("Type: ")
            location = input("Location: ")
            recurrence = input("Recurrence (weekly/monthly/none): ").lower()
            recurrence = recurrence if recurrence in ["weekly", "monthly"] else None
            manager.add_event(name, date, time, type, location, recurrence)

        elif choice == "2":
            event_id = int(input("Event ID to edit: "))
            name = input("New name (leave blank if no change): ")
            date = input("New date (DD-MM-YYYY): ")
            time = input("New time (HH:MM): ")
            manager.edit_event(event_id, name=name, date=date, time=time)

        elif choice == "3":
            identifier = input("Enter Event ID or Name to delete: ")
            manager.delete_event(identifier)

        elif choice == "4":
            date = input("Enter date (DD-MM-YYYY): ")
            manager.view_events_by_date(date)

        elif choice == "5":
            manager.today_events()

        elif choice == "6":
            keyword = input("Enter keyword to search: ")
            manager.search_events(keyword)

        elif choice == "7":
            manager.send_reminders()

        elif choice == "8":
            manager.handle_recurring_events()
            print("Recurring events added.")

        elif choice == "9":
            PersistentStorage.save(manager.events)
            print("Events saved. Exiting...")
            break

if __name__ == "__main__":
    main()
